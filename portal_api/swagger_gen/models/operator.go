// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operator The Operator Schema
//
// swagger:model Operator
type Operator struct {

	// average rating
	// Required: true
	AverageRating *float64 `json:"averageRating"`

	// facility ids
	// Required: true
	FacilityIds []string `json:"facilityIds"`

	// mobile number
	// Required: true
	// Max Length: 10
	// Min Length: 10
	MobileNumber *string `json:"mobileNumber"`

	// national identifier
	// Required: true
	NationalIdentifier *string `json:"nationalIdentifier"`

	// operator code
	// Required: true
	OperatorCode *string `json:"operatorCode"`

	// Full name
	// Required: true
	OperatorName *string `json:"operatorName"`

	// serial num
	// Required: true
	SerialNum *int64 `json:"serialNum"`

	// signatures
	Signatures []*Signature `json:"signatures"`

	// status
	// Required: true
	// Enum: [Active Inactive]
	Status *string `json:"status"`

	// training certificate
	// Required: true
	TrainingCertificate *string `json:"trainingCertificate"`
}

// Validate validates this operator
func (m *Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilityIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobileNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationalIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) validateAverageRating(formats strfmt.Registry) error {

	if err := validate.Required("averageRating", "body", m.AverageRating); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateFacilityIds(formats strfmt.Registry) error {

	if err := validate.Required("facilityIds", "body", m.FacilityIds); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateMobileNumber(formats strfmt.Registry) error {

	if err := validate.Required("mobileNumber", "body", m.MobileNumber); err != nil {
		return err
	}

	if err := validate.MinLength("mobileNumber", "body", string(*m.MobileNumber), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("mobileNumber", "body", string(*m.MobileNumber), 10); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateNationalIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("nationalIdentifier", "body", m.NationalIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateOperatorCode(formats strfmt.Registry) error {

	if err := validate.Required("operatorCode", "body", m.OperatorCode); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateOperatorName(formats strfmt.Registry) error {

	if err := validate.Required("operatorName", "body", m.OperatorName); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateSerialNum(formats strfmt.Registry) error {

	if err := validate.Required("serialNum", "body", m.SerialNum); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateSignatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var operatorTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operatorTypeStatusPropEnum = append(operatorTypeStatusPropEnum, v)
	}
}

const (

	// OperatorStatusActive captures enum value "Active"
	OperatorStatusActive string = "Active"

	// OperatorStatusInactive captures enum value "Inactive"
	OperatorStatusInactive string = "Inactive"
)

// prop value enum
func (m *Operator) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operatorTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Operator) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateTrainingCertificate(formats strfmt.Registry) error {

	if err := validate.Required("trainingCertificate", "body", m.TrainingCertificate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operator) UnmarshalBinary(b []byte) error {
	var res Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
