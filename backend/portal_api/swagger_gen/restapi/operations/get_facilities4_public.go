// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFacilities4PublicHandlerFunc turns a function with the right signature into a get facilities4 public handler
type GetFacilities4PublicHandlerFunc func(GetFacilities4PublicParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFacilities4PublicHandlerFunc) Handle(params GetFacilities4PublicParams) middleware.Responder {
	return fn(params)
}

// GetFacilities4PublicHandler interface for that can handle valid get facilities4 public params
type GetFacilities4PublicHandler interface {
	Handle(GetFacilities4PublicParams) middleware.Responder
}

// NewGetFacilities4Public creates a new http.Handler for the get facilities4 public operation
func NewGetFacilities4Public(ctx *middleware.Context, handler GetFacilities4PublicHandler) *GetFacilities4Public {
	return &GetFacilities4Public{Context: ctx, Handler: handler}
}

/* GetFacilities4Public swagger:route GET /public/facilities getFacilities4Public

get facilities for public

*/
type GetFacilities4Public struct {
	Context *middleware.Context
	Handler GetFacilities4PublicHandler
}

func (o *GetFacilities4Public) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFacilities4PublicParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
