// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/portal-api/swagger_gen/models"
)

// UpdateFacilityUserHandlerFunc turns a function with the right signature into a update facility user handler
type UpdateFacilityUserHandlerFunc func(UpdateFacilityUserParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateFacilityUserHandlerFunc) Handle(params UpdateFacilityUserParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// UpdateFacilityUserHandler interface for that can handle valid update facility user params
type UpdateFacilityUserHandler interface {
	Handle(UpdateFacilityUserParams, *models.JWTClaimBody) middleware.Responder
}

// NewUpdateFacilityUser creates a new http.Handler for the update facility user operation
func NewUpdateFacilityUser(ctx *middleware.Context, handler UpdateFacilityUserHandler) *UpdateFacilityUser {
	return &UpdateFacilityUser{Context: ctx, Handler: handler}
}

/*UpdateFacilityUser swagger:route PUT /facility/users updateFacilityUser

Update Facility User

*/
type UpdateFacilityUser struct {
	Context *middleware.Context
	Handler UpdateFacilityUserHandler
}

func (o *UpdateFacilityUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateFacilityUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
