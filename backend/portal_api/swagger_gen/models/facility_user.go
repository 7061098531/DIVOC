// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FacilityUser facility user
//
// swagger:model FacilityUser
type FacilityUser struct {

	// Facility User Id
	EmployeeID string `json:"employeeId,omitempty"`

	// enable/disable user
	// Enum: [true false]
	Enabled string `json:"enabled,omitempty"`

	// groups
	Groups []*UserGroup `json:"groups"`

	// Facility User Id
	ID string `json:"id,omitempty"`

	// Facility User Mobile Number
	MobileNumber string `json:"mobileNumber,omitempty"`

	// Facility User Name
	Name string `json:"name,omitempty"`
}

// Validate validates this facility user
func (m *FacilityUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var facilityUserTypeEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		facilityUserTypeEnabledPropEnum = append(facilityUserTypeEnabledPropEnum, v)
	}
}

const (

	// FacilityUserEnabledTrue captures enum value "true"
	FacilityUserEnabledTrue string = "true"

	// FacilityUserEnabledFalse captures enum value "false"
	FacilityUserEnabledFalse string = "false"
)

// prop value enum
func (m *FacilityUser) validateEnabledEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, facilityUserTypeEnabledPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FacilityUser) validateEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.Enabled) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnabledEnum("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *FacilityUser) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FacilityUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FacilityUser) UnmarshalBinary(b []byte) error {
	var res FacilityUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
