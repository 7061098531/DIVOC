// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/notification-service/swagger_gen/models"
)

// PostNotificationHandlerFunc turns a function with the right signature into a post notification handler
type PostNotificationHandlerFunc func(PostNotificationParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNotificationHandlerFunc) Handle(params PostNotificationParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// PostNotificationHandler interface for that can handle valid post notification params
type PostNotificationHandler interface {
	Handle(PostNotificationParams, *models.JWTClaimBody) middleware.Responder
}

// NewPostNotification creates a new http.Handler for the post notification operation
func NewPostNotification(ctx *middleware.Context, handler PostNotificationHandler) *PostNotification {
	return &PostNotification{Context: ctx, Handler: handler}
}

/*PostNotification swagger:route POST /notification notification postNotification

Notify the intended person using different channels

Common notification service for different channels like eSMS, email etc. Target address can depict specifics about mode and channel

*/
type PostNotification struct {
	Context *middleware.Context
	Handler PostNotificationHandler
}

func (o *PostNotification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNotificationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
